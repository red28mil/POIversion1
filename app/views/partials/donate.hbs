<div class="uk-margin uk-width-2xlarge uk-margin-auto uk-card uk-card-default uk-card-body uk-box-shadow-large">
  <form class="uk-form-stacked uk-text-left" action="/donate" method="POST">
    <div class="uk-grid uk-grid-stack">
      <div class="uk-width-expand@m">
        <div class="uk-margin">
          <label class="uk-form-label" for="form-stacked-text">Enter amount</label>
          <div class="uk-form-controls">
            <input class="uk-input" id="form-stacked-text" type="number" name="amount" placeholder="Euros">
          </div>
        </div>
        <div class="uk-margin">
          <div class="uk-form-label">Payment</div>
          <div class="uk-form-controls">
            <label><input class="uk-radio" type="radio" name="method" value="paypal"> Paypal </label><br> <label><input
            class="uk-radio" type="radio" name="method" value="direct"> Cash </label>
          </div>
        </div>
      </div>
      <div class=" uk-width-expand@m">
        <div class="uk-margin uk-text-left">
          <div class="uk-form-label">Select Candidate</div>
          <div class="uk-form-controls ">
            {{#each candidates }}
              <label> <input class="uk-radio" type="radio" name="candidate" value="{{lastName}},{{firstName}}">
                {{lastName}}, {{firstName}}</label> <br>
            {{/each}}
          </div>
        </div>
        <div class="uk-margin">
          <button class="submit uk-button uk-button-primary uk-button-large uk-width-1-1">Donate</button>
        </div>
      </div>
    </div>
  </form>
  {{> error }}
</div>
<head>
  <title>Weather API </title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/uikit@3.5.9/dist/css/uikit.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/uikit@3.5.9/dist/js/uikit.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/uikit@3.5.9/dist/js/uikit-icons.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.0/axios.min.js"></script>
</head>

<div class="uk-container uk-dark">
  <div class="uk-flex uk-flex-center uk-flex-middle uk-margin">
    <div class="uk-width-expand uk-card-primary uk-card-default  uk-text-center">
      <div class="title"> Latest Weather </div>
      <div class="uk-text-small">Get the latest beach weather</div>
    </div>
  </div>

  <div class="uk-width-expand uk-card uk-card-default uk-padding">
    <fieldset class="uk-fieldset">
      <legend class="uk-legend">To get update weather report please enter city/town name</legend>
      <div class="uk-margin">
        <input id="location-id" class="uk-input" type="text" placeholder="Location">
      </div>
    </fieldset>
    <button onClick="fetchWeather()" id="getweather-btn" class="uk-button uk-button-default">Get Weather</button>
  </div>

  <table id="weather-table" class="uk-table uk-table-divider">
    <caption> Weather Report </caption>
    <thead>
    <tr>
      <th>Feels Like</th>
      <th>Clouds</th>
      <th>Wind Speed</th>
      <th>Wind Direction</th>
      <th>Visibility</th>
      <th>Humidity</th>
    </tr>
    </thead>
    <tbody>
    <tr></tr>
    </tbody>
  </table>
</div>
<div class="uk-width-expand@m uk-container"></div>
<script>const apiKey = "9f3d04327d2714f90779faa7428fbb46";

async function readWeather(location) {
  let weather = null;
  const weatherRequest = `http://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}`;
  try {
    const response = await axios.get(weatherRequest);
    if (response.status == 200) {
      weather = response.data;
    }
  } catch (error) {
    console.log(error);
  }
  return weather;
}

function renderCell(row, col, value) {
  const cell = row.insertCell(col);
  cell.innerHTML = value;
}

async function renderWeather(report) {
  const table = document.getElementById("weather-table");
  const row = table.insertRow(-1);
  renderCell(row, 0, report.feelsLike);
  renderCell(row, 1, report.clouds);
  renderCell(row, 2, report.windSpeed);
  renderCell(row, 3, report.windDirection);
  renderCell(row, 4, report.visibility);
  renderCell(row, 5, report.humidity);
}

async function fetchWeather() {
  let result = "Success";
  const location = document.getElementById("location-id").value;
  let weather = await readWeather(location);
  if (weather != null) {
    const report = {
      feelsLike: Math.round(weather.main.feels_like - 273.15),
      clouds: weather.weather[0].description,
      windSpeed: weather.wind.speed,
      windDirection: weather.wind.deg,
      visibility: weather.visibility / 1000,
      humidity: weather.main.humidity,
    };
    renderWeather(report);
  } else {
    result = "Unknown Location";
  }
  resultElement = document.getElementById("result-msg");
  resultElement.textContent = result;
}
</script>
<script src="weather-web.js" type="text/javascript"></script>


<body>
<div class="uk-container">
  <div class="uk-flex uk-flex-center uk-flex-middle uk-margin">
    <div class="uk-width-expand uk-card-primary uk-card-default  uk-text-center">
      <div class="title"> search for beach near you </div>
      <div>            POI                           </div>
    </div>
  </div>
  <div class="uk-flex uk-flex-center uk-flex-middle ">
    <div class="uk-width-expand uk-card uk-card-default uk-padding">
      <div style="display: none">
        <input
          id="pac-input"
          class="controls"
          type="text"
          placeholder="Enter a location"
        />
      </div>
      <div id="map"></div>
      <div id="infowindow-content">
        <span id="place-name" class="title"></span><br />
        <strong></strong> <span id="place-id"></span><br />
        <span id="place-address"></span>
      </div>

      <style>
        #map {
          height: 400px;
          width: 100%;
        }
      </style>

      <script async
              src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBp-6OjXUSaHmKCJga0blnT9ogsNcGhu2g&callback=initAutocomplete&libraries=places&v=weekly">
      </script>
      <script>
        function initAutocomplete() {
          const map = new google.maps.Map(document.getElementById("map"), {
            center: {lat: 53.15, lng: -6.213},
            zoom: 6,
            mapTypeId: "roadmap",
          });
          // Create the search box and link it to the UI element.
          const input = document.getElementById("pac-input");
          const searchBox = new google.maps.places.SearchBox(input);
          map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
          // Bias the SearchBox results towards current map's viewport.
          map.addListener("bounds_changed", () => {
            searchBox.setBounds(map.getBounds());
          });
          let markers = [];
          // Listen for the event fired when the user selects a prediction and retrieve
          // more details for that place.
          searchBox.addListener("places_changed", () => {
            const places = searchBox.getPlaces();

            if (places.length == 0) {
              return;
            }
            // Clear out the old markers.
            markers.forEach((marker) => {
              marker.setMap(null);
            });
            markers = [];
            // For each place, get the icon, name and location.
            const bounds = new google.maps.LatLngBounds();
            places.forEach((place) => {
              if (!place.geometry || !place.geometry.location) {
                console.log("Returned place contains no geometry");
                return;
              }
              const icon = {
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25),
              };
              // Create a marker for each place.
              markers.push(
                new google.maps.Marker({
                  map,
                  icon,
                  title: place.name,
                  position: place.geometry.location,
                })
              );

              if (place.geometry.viewport) {
                // Only geocodes have viewport.
                bounds.union(place.geometry.viewport);
              } else {
                bounds.extend(place.geometry.location);
              }
            });
            map.fitBounds(bounds);
          });
        }

      </script>
      <div class="uk-container">
        <div class="js-upload uk-placeholder uk-text-center uk-inline uk-dark">
          <span uk-icon="icon: cloud-upload"></span>
          <span class="uk-text-middle">Attach images by dropping them here or</span>
          <div uk-form-custom>
            <input type="file" multiple>
            <span class="uk-link">selecting one</span>
          </div>
        </div>

        <progress id="js-progressbar" class="uk-progress" value="0" max="100" hidden></progress>

        <script src="/public/upload.js" type="text/javascript"></script>
      </div>
 </body>




